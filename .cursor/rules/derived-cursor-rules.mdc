---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## AI Coding Assistant Rules

## TECH STACK

- VitePress (updated to latest version 1.6.3 using pnpm. See 2025.05.12 update in WORKFLOW & RELEASE RULES for details)
- Tailwind CSS (upgraded to 4.1.10. See 2025.06.24 update in WORKFLOW & RELEASE RULES for details)
- Vue.js
- TypeScript
- pnpm (added 2025.05.12)
- @vite-pwa/vitepress (updated to latest version 1.0.0 using pnpm. See 2025.05.12 update in WORKFLOW & RELEASE RULES for details)
- @tailwindcss/vite (added 2025.06.24)
- @tailwindcss/typography

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- All interactions with the AI coding assistant are logged and versioned.  
- Version updates are noted in relevant sections (e.g., TECH STACK,  PROJECT DOCUMENTATION & CONTEXT SYSTEM).
-  Commit messages should clearly describe changes made.
- Version 2025.05.12: Footer layout adjusted to display below content on all screen sizes.  Resolved issue with footer alignment when only one of "previous" or "next" post is available.
- Version 2025.05.12: VitePress and @vite-pwa/vitepress upgraded to latest versions using pnpm.
- Version 2025.05.12: PWA manifest updated to include multiple sizes of PNG icons and a SVG icon for better browser compatibility.  See commit [insert commit hash here] for details.

## CODING STANDARDS

- Use consistent naming conventions (e.g., camelCase for variables).
- Write clean, well-documented code.
- Follow Tailwind CSS best practices.  Dark mode support should be included for all components.  Colors should be defined using Tailwind classes wherever possible.  Avoid hardcoding colors unless absolutely necessary.
- Utilize TypeScript for type safety.
-  All SVG icons should use `currentColor` for fill color to inherit parent element's color.  Avoid hardcoding colors within SVGs.
- Footer previous/next pagination should always be displayed below content regardless of screen size.  Use flexbox for responsive layout (see 2025.05.12 update in WORKFLOW & RELEASE RULES for details).
- PWA manifest icons should include multiple sizes and formats (PNG and SVG) for optimal compatibility across browsers and devices.
- When using `@tailwindcss/vite`, a separate `postcss.config.js` file is not required and should be removed to avoid conflicts. All Tailwind CSS configuration should reside in `tailwind.config.js`.

## WORKFLOW & RELEASE RULES

- All changes must be thoroughly tested before deployment.
-  Commit frequently with clear messages.
- New features must be accompanied by comprehensive documentation.
- Version 2025.05.12: Resolved issue with footer layout on different screen sizes.  The footer, including previous/next pagination, now consistently appears below the content.  Flexbox is now used for responsive layout in `Article.vue`.  Refer to commit e7fc0452-246e-4c8e-a394-8dbe0fc81262 for details. Resolved issue with footer alignment when only one of "previous" or "next" post is available.  The single pagination element now aligns correctly to either the left or right side.
- Version 2025.05.12: Upgraded VitePress and @vite-pwa/vitepress packages to latest versions using `pnpm upgrade vitepress@latest @vite-pwa/vitepress@latest --latest`.  Ensure `vite.config` is updated accordingly after package upgrades.  Use `pnpm config set registry http://registry.npmmirror.com/ && pnpm install` to resolve registry mismatches before upgrading.
- Version 2025.05.12: Updated PWA manifest to include multiple sizes of PNG icons and an SVG icon.
- When upgrading Tailwind CSS, always use the official migration script. Example command: `npx tailwindcss@latest upgrade --config postcss.config.js --dry-run`. Remember to remove the `--dry-run` flag when ready to apply the changes.
- Version 2025.06.24: Tailwind CSS upgraded to version 4.1.10. Project now uses `@tailwindcss/vite` plugin. Ensure `postcss.config.js` is removed or disabled to avoid conflicts.
- Version 2025.06.24: When migrating to `@tailwindcss/vite`, create a `tailwind.config.js` file containing content paths, darkMode settings, and plugin configurations (e.g., Typography). Then, remove `postcss.config.js`. Verify the `@tailwindcss/vite` plugin configuration in `.vitepress/config.ts`.

## DEBUGGING

- Use browser developer tools for debugging.
- Utilize console logging for troubleshooting.

## BEST PRACTICES

- Prioritize code readability and maintainability.
-  Use version control (Git) effectively.
-  Always test thoroughly before merging changes.
-  Leverage Tailwind's dark mode features (`darkMode: 'class'`) for efficient theme switching.

## UI/UX GUIDELINES

-  Maintain visual consistency across the application.
-  Ensure accessibility for all users.
-  Headers should include a subtle shadow (`shadow-sm`) in light mode and no shadow (`dark:shadow-none`) in dark mode.
- List items should use a subtle background color to create visual separation (e.g., `bg-gray-50` for light mode, `dark:bg-neutral-800` for dark mode).

## CONFLICT RESOLUTION

- If a new rule conflicts with an existing one, the conflict will be noted, and either resolved by clarifying the final rule or flagged for user confirmation.

## REFERENCES

- Tailwind CSS Documentation: [https://tailwindcss.com/docs](https://tailwindcss.com/docs)
- VitePress Documentation: [https://vitepress.vuejs.org/](https://vitepress.vuejs.org/)